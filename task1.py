# -*- coding: utf-8 -*-
"""TASK1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GL-G9zil3mtZKmXNweqjn70QzfKq9pXF

Importing all files
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.svm import LinearSVC
from sklearn.metrics import accuracy_score, classification_report
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder

# Set pandas options to show all columns without line break
pd.set_option('display.width', None)  # Set display width to None (auto-detect)
pd.set_option('display.max_columns', None)  # Show all columns

train_data = []

# Open and read the file
with open("train_data.txt", "r", encoding="utf-8") as file:
    for line in file:
        if ":::" in line:
            ID, TITLE, GENRE, DESCRIPTION = line.strip().split(":::", 3)  # Adjusted split to 3
            train_data.append((ID, TITLE, GENRE, DESCRIPTION))

# Create DataFrame with column names
train_df = pd.DataFrame(train_data, columns=["ID", "TITLE", "GENRE", "DESCRIPTION"])

# Show the first few rows
print(train_df.head(10))

label_encoder = LabelEncoder()
train_df['GENRE_ENCODED'] = label_encoder.fit_transform(train_df['GENRE'])
print(train_df)

df.info()

df.isnull().sum()

df.describe()

pd.set_option('display.width', None)
pd.set_option('display.max_columns', None)

test_data = []

# Open and read the file
with open("test_data.txt", "r", encoding="utf-8") as file:
    for line in file:
        if ":::" in line:
            parts = line.strip().split(":::", 3)  # Split into a maximum of 3 parts
            if len(parts) == 3:  # Ensure the line has exactly 4 parts
                ID, TITLE, DESCRIPTION = parts
                test_data.append((ID, TITLE, DESCRIPTION))

# Create DataFrame with column names
test_df = pd.DataFrame(test_data, columns=["ID", "TITLE","DESCRIPTION"])

# Show the first few rows
print(test_df.head())

#  TF-IDF Vectorization
vectorizer = TfidfVectorizer(stop_words='english', max_features=5000)
X_train = vectorizer.fit_transform(train_df['DESCRIPTION'])
y_train = train_df['GENRE_ENCODED']
X_test = vectorizer.transform(test_df['DESCRIPTION'])

#  Train the SVM Model
svm = LinearSVC()
svm.fit(X_train, y_train)

#  Predict Genres

predicted_labels = svm.predict(X_test)
predicted_genres = label_encoder.inverse_transform(predicted_labels)
test_df['PREDICTED_GENRE'] = predicted_genres

#  View Sample Predictions
print("\nðŸŽ¬ Sample Predictions:\n")
for i in range(5):
    print(f"Title: {test_df.iloc[i]['TITLE']}")
    print(f"Plot: {test_df.iloc[i]['DESCRIPTION'][:100]}...")
    print(f"Predicted Genre: {test_df.iloc[i]['PREDICTED_GENRE']}")
    print("-" * 50)